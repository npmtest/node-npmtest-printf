{"/home/travis/build/npmtest/node-npmtest-printf/test.js":"/* istanbul instrument in package npmtest_printf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-printf/lib.npmtest_printf.js":"/* istanbul instrument in package npmtest_printf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_printf = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_printf = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-printf/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-printf && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_printf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_printf\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_printf.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_printf.rollup.js'] =\n            local.assetsDict['/assets.npmtest_printf.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_printf.__dirname +\n                    '/lib.npmtest_printf.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-printf/node_modules/printf/lib/printf.js":"\nvar util = require('util');\n\nvar tokenize = function(/*String*/ str, /*RegExp*/ re, /*Function?*/ parseDelim, /*Object?*/ instance){\n  // summary:\n  //    Split a string by a regular expression with the ability to capture the delimeters\n  // parseDelim:\n  //    Each group (excluding the 0 group) is passed as a parameter. If the function returns\n  //    a value, it's added to the list of tokens.\n  // instance:\n  //    Used as the \"this' instance when calling parseDelim\n  var tokens = [];\n  var match, content, lastIndex = 0;\n  while((match = re.exec(str))){\n    content = str.slice(lastIndex, re.lastIndex - match[0].length);\n    if(content.length){\n      tokens.push(content);\n    }\n    if(parseDelim){\n      var parsed = parseDelim.apply(instance, match.slice(1).concat(tokens.length));\n      if(typeof parsed != 'undefined'){\n        if(parsed.specifier === '%'){\n          tokens.push('%');\n        }else{\n          tokens.push(parsed);\n        }\n      }\n    }\n    lastIndex = re.lastIndex;\n  }\n  content = str.slice(lastIndex);\n  if(content.length){\n    tokens.push(content);\n  }\n  return tokens;\n};\n\nvar Formatter = function(/*String*/ format){\n  this._mapped = false;\n  this._format = format;\n  this._tokens = tokenize(format, this._re, this._parseDelim, this);\n};\n\nFormatter.prototype._re = /\\%(?:\\(([\\w_.]+)\\)|([1-9]\\d*)\\$)?([0 +\\-\\#]*)(\\*|\\d+)?(\\.)?(\\*|\\d+)?[hlL]?([\\%bscdeEfFgGioOuxX])/g;\nFormatter.prototype._parseDelim = function(mapping, intmapping, flags, minWidth, period, precision, specifier){\n  if(mapping){\n    this._mapped = true;\n  }\n  return {\n    mapping: mapping,\n    intmapping: intmapping,\n    flags: flags,\n    _minWidth: minWidth, // May be dependent on parameters\n    period: period,\n    _precision: precision, // May be dependent on parameters\n    specifier: specifier\n  };\n};\nFormatter.prototype._specifiers = {\n  b: {\n    base: 2,\n    isInt: true\n  },\n  o: {\n    base: 8,\n    isInt: true\n  },\n  x: {\n    base: 16,\n    isInt: true\n  },\n  X: {\n    extend: ['x'],\n    toUpper: true\n  },\n  d: {\n    base: 10,\n    isInt: true\n  },\n  i: {\n    extend: ['d']\n  },\n  u: {\n    extend: ['d'],\n    isUnsigned: true\n  },\n  c: {\n    setArg: function(token){\n      if(!isNaN(token.arg)){\n        var num = parseInt(token.arg);\n        if(num < 0 || num > 127){\n          throw new Error('invalid character code passed to %c in printf');\n        }\n        token.arg = isNaN(num) ? '' + num : String.fromCharCode(num);\n      }\n    }\n  },\n  s: {\n    setMaxWidth: function(token){\n      token.maxWidth = (token.period == '.') ? token.precision : -1;\n    }\n  },\n  e: {\n    isDouble: true,\n    doubleNotation: 'e'\n  },\n  E: {\n    extend: ['e'],\n    toUpper: true\n  },\n  f: {\n    isDouble: true,\n    doubleNotation: 'f'\n  },\n  F: {\n    extend: ['f']\n  },\n  g: {\n    isDouble: true,\n    doubleNotation: 'g'\n  },\n  G: {\n    extend: ['g'],\n    toUpper: true\n  },\n  O: {\n    isObject: true\n  }\n};\nFormatter.prototype.format = function(/*mixed...*/ filler){\n  if(this._mapped && typeof filler != 'object'){\n    throw new Error('format requires a mapping');\n  }\n\n  var str = '';\n  var position = 0;\n  for(var i = 0, token; i < this._tokens.length; i++){\n    token = this._tokens[i];\n\n    if(typeof token == 'string'){\n      str += token;\n    }else{\n      if(this._mapped){\n        // Identify value of property defined in `token.mapping`\n        var tokens = token.mapping.split('.');\n        var value = filler;\n        for (var j = 0, c = tokens.length; j < c; j++) {\n          value = value[tokens[j]];\n          if (typeof value === 'undefined') {\n            break\n          }\n        }\n        if(typeof value == 'undefined'){\n          throw new Error('missing key ' + token.mapping);\n        }\n        token.arg = value;\n      }else{\n        if(token.intmapping){\n          position = parseInt(token.intmapping) - 1;\n        }\n        if(position >= arguments.length){\n          throw new Error('got ' + arguments.length + ' printf arguments, insufficient for \\'' + this._format + '\\'');\n        }\n        token.arg = arguments[position++];\n      }\n\n      if(!token.compiled){\n        token.compiled = true;\n        token.sign = '';\n        token.zeroPad = false;\n        token.rightJustify = false;\n        token.alternative = false;\n\n        var flags = {};\n        for(var fi = token.flags.length; fi--;){\n          var flag = token.flags.charAt(fi);\n          flags[flag] = true;\n          switch(flag){\n            case ' ':\n              token.sign = ' ';\n              break;\n            case '+':\n              token.sign = '+';\n              break;\n            case '0':\n              token.zeroPad = (flags['-']) ? false : true;\n              break;\n            case '-':\n              token.rightJustify = true;\n              token.zeroPad = false;\n              break;\n            case '#':\n              token.alternative = true;\n              break;\n            default:\n              throw Error('bad formatting flag \\'' + token.flags.charAt(fi) + '\\'');\n          }\n        }\n\n        token.minWidth = (token._minWidth) ? parseInt(token._minWidth) : 0;\n        token.maxWidth = -1;\n        token.toUpper = false;\n        token.isUnsigned = false;\n        token.isInt = false;\n        token.isDouble = false;\n        token.isObject = false;\n        token.precision = 1;\n        if(token.period == '.'){\n          if(token._precision){\n            token.precision = parseInt(token._precision);\n          }else{\n            token.precision = 0;\n          }\n        }\n\n        var mixins = this._specifiers[token.specifier];\n        if(typeof mixins == 'undefined'){\n          throw new Error('unexpected specifier \\'' + token.specifier + '\\'');\n        }\n        if(mixins.extend){\n          var s = this._specifiers[mixins.extend];\n          for(var k in s){\n            mixins[k] = s[k];\n          }\n          delete mixins.extend;\n        }\n        for(var l in mixins){\n          token[l] = mixins[l];\n        }\n      }\n\n      if(typeof token.setArg == 'function'){\n        token.setArg(token);\n      }\n\n      if(typeof token.setMaxWidth == 'function'){\n        token.setMaxWidth(token);\n      }\n\n      if(token._minWidth == '*'){\n        if(this._mapped){\n          throw new Error('* width not supported in mapped formats');\n        }\n        token.minWidth = parseInt(arguments[position++]);\n        if(isNaN(token.minWidth)){\n          throw new Error('the argument for * width at position ' + position + ' is not a number in ' + this._format);\n        }\n        // negative width means rightJustify\n        if (token.minWidth < 0) {\n          token.rightJustify = true;\n          token.minWidth = -token.minWidth;\n        }\n      }\n\n      if(token._precision == '*' && token.period == '.'){\n        if(this._mapped){\n          throw new Error('* precision not supported in mapped formats');\n        }\n        token.precision = parseInt(arguments[position++]);\n        if(isNaN(token.precision)){\n          throw Error('the argument for * precision at position ' + position + ' is not a number in ' + this._format);\n        }\n        // negative precision means unspecified\n        if (token.precision < 0) {\n          token.precision = 1;\n          token.period = '';\n        }\n      }\n      if(token.isInt){\n        // a specified precision means no zero padding\n        if(token.period == '.'){\n          token.zeroPad = false;\n        }\n        this.formatInt(token);\n      }else if(token.isDouble){\n        if(token.period != '.'){\n          token.precision = 6;\n        }\n        this.formatDouble(token);\n      }else if(token.isObject){\n        this.formatObject(token);\n      }\n      this.fitField(token);\n\n      str += '' + token.arg;\n    }\n  }\n\n  return str;\n};\nFormatter.prototype._zeros10 = '0000000000';\nFormatter.prototype._spaces10 = '          ';\nFormatter.prototype.formatInt = function(token) {\n  var i = parseInt(token.arg);\n  if(!isFinite(i)){ // isNaN(f) || f == Number.POSITIVE_INFINITY || f == Number.NEGATIVE_INFINITY)\n    // allow this only if arg is number\n    if(typeof token.arg != 'number'){\n      throw new Error('format argument \\'' + token.arg + '\\' not an integer; parseInt returned ' + i);\n    }\n    //return '' + i;\n    i = 0;\n  }\n\n  // if not base 10, make negatives be positive\n  // otherwise, (-10).toString(16) is '-a' instead of 'fffffff6'\n  if(i < 0 && (token.isUnsigned || token.base != 10)){\n    i = 0xffffffff + i + 1;\n  }\n\n  if(i < 0){\n    token.arg = (- i).toString(token.base);\n    this.zeroPad(token);\n    token.arg = '-' + token.arg;\n  }else{\n    token.arg = i.toString(token.base);\n    // need to make sure that argument 0 with precision==0 is formatted as ''\n    if(!i && !token.precision){\n      token.arg = '';\n    }else{\n      this.zeroPad(token);\n    }\n    if(token.sign){\n      token.arg = token.sign + token.arg;\n    }\n  }\n  if(token.base == 16){\n    if(token.alternative){\n      token.arg = '0x' + token.arg;\n    }\n    token.arg = token.toUpper ? token.arg.toUpperCase() : token.arg.toLowerCase();\n  }\n  if(token.base == 8){\n    if(token.alternative && token.arg.charAt(0) != '0'){\n      token.arg = '0' + token.arg;\n    }\n  }\n};\nFormatter.prototype.formatDouble = function(token) {\n  var f = parseFloat(token.arg);\n  if(!isFinite(f)){ // isNaN(f) || f == Number.POSITIVE_INFINITY || f == Number.NEGATIVE_INFINITY)\n    // allow this only if arg is number\n    if(typeof token.arg != 'number'){\n      throw new Error('format argument \\'' + token.arg + '\\' not a float; parseFloat returned ' + f);\n    }\n    // C99 says that for 'f':\n    //   infinity -> '[-]inf' or '[-]infinity' ('[-]INF' or '[-]INFINITY' for 'F')\n    //   NaN -> a string  starting with 'nan' ('NAN' for 'F')\n    // this is not commonly implemented though.\n    //return '' + f;\n    f = 0;\n  }\n\n  switch(token.doubleNotation) {\n    case 'e': {\n      token.arg = f.toExponential(token.precision);\n      break;\n    }\n    case 'f': {\n      token.arg = f.toFixed(token.precision);\n      break;\n    }\n    case 'g': {\n      // C says use 'e' notation if exponent is < -4 or is >= prec\n      // ECMAScript for toPrecision says use exponential notation if exponent is >= prec,\n      // though step 17 of toPrecision indicates a test for < -6 to force exponential.\n      if(Math.abs(f) < 0.0001){\n        //print('forcing exponential notation for f=' + f);\n        token.arg = f.toExponential(token.precision > 0 ? token.precision - 1 : token.precision);\n      }else{\n        token.arg = f.toPrecision(token.precision);\n      }\n\n      // In C, unlike 'f', 'gG' removes trailing 0s from fractional part, unless alternative format flag ('#').\n      // But ECMAScript formats toPrecision as 0.00100000. So remove trailing 0s.\n      if(!token.alternative){\n        //print('replacing trailing 0 in \\'' + s + '\\'');\n        token.arg = token.arg.replace(/(\\..*[^0])0*e/, '$1e');\n        // if fractional part is entirely 0, remove it and decimal point\n        token.arg = token.arg.replace(/\\.0*e/, 'e').replace(/\\.0$/,'');\n      }\n      break;\n    }\n    default: throw new Error('unexpected double notation \\'' + token.doubleNotation + '\\'');\n  }\n\n  // C says that exponent must have at least two digits.\n  // But ECMAScript does not; toExponential results in things like '1.000000e-8' and '1.000000e+8'.\n  // Note that s.replace(/e([\\+\\-])(\\d)/, 'e$10$2') won't work because of the '$10' instead of '$1'.\n  // And replace(re, func) isn't supported on IE50 or Safari1.\n  token.arg = token.arg.replace(/e\\+(\\d)$/, 'e+0$1').replace(/e\\-(\\d)$/, 'e-0$1');\n\n  // if alt, ensure a decimal point\n  if(token.alternative){\n    token.arg = token.arg.replace(/^(\\d+)$/,'$1.');\n    token.arg = token.arg.replace(/^(\\d+)e/,'$1.e');\n  }\n\n  if(f >= 0 && token.sign){\n    token.arg = token.sign + token.arg;\n  }\n\n  token.arg = token.toUpper ? token.arg.toUpperCase() : token.arg.toLowerCase();\n};\nFormatter.prototype.formatObject = function(token) {\n  // If no precision is specified, then reset it to null (infinite depth).\n  var precision = (token.period === '.') ? token.precision : null;\n  token.arg = util.inspect(token.arg, !token.alternative, precision);\n};\nFormatter.prototype.zeroPad = function(token, /*Int*/ length) {\n  length = (arguments.length == 2) ? length : token.precision;\n  var negative = false;\n  if(typeof token.arg != \"string\"){\n    token.arg = \"\" + token.arg;\n  }\n  if (token.arg.substr(0,1) === '-') {\n    negative = true;\n    token.arg = token.arg.substr(1);\n  }\n\n  var tenless = length - 10;\n  while(token.arg.length < tenless){\n    token.arg = (token.rightJustify) ? token.arg + this._zeros10 : this._zeros10 + token.arg;\n  }\n  var pad = length - token.arg.length;\n  token.arg = (token.rightJustify) ? token.arg + this._zeros10.substring(0, pad) : this._zeros10.substring(0, pad) + token.arg;\n  if (negative) token.arg = '-' + token.arg;\n};\nFormatter.prototype.fitField = function(token) {\n  if(token.maxWidth >= 0 && token.arg.length > token.maxWidth){\n    return token.arg.substring(0, token.maxWidth);\n  }\n  if(token.zeroPad){\n    this.zeroPad(token, token.minWidth);\n    return;\n  }\n  this.spacePad(token);\n};\nFormatter.prototype.spacePad = function(token, /*Int*/ length) {\n  length = (arguments.length == 2) ? length : token.minWidth;\n  if(typeof token.arg != 'string'){\n    token.arg = '' + token.arg;\n  }\n  var tenless = length - 10;\n  while(token.arg.length < tenless){\n    token.arg = (token.rightJustify) ? token.arg + this._spaces10 : this._spaces10 + token.arg;\n  }\n  var pad = length - token.arg.length;\n  token.arg = (token.rightJustify) ? token.arg + this._spaces10.substring(0, pad) : this._spaces10.substring(0, pad) + token.arg;\n};\n\n\nmodule.exports = function(){\n  var args = Array.prototype.slice.call(arguments),\n    stream, format;\n  if(args[0] instanceof require('stream').Stream){\n    stream = args.shift();\n  }\n  format = args.shift();\n  var formatter = new Formatter(format);\n  var string = formatter.format.apply(formatter, args);\n  if(stream){\n    stream.write(string);\n  }else{\n    return string;\n  }\n};\n\nmodule.exports.Formatter = Formatter;\n"}